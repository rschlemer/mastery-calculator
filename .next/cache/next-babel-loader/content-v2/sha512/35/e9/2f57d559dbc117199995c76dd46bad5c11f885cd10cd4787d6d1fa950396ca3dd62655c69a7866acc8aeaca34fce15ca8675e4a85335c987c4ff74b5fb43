{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ras/Documents/git/mastery-calculator/pages/probabilites.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\nimport Head from 'next/head';\nimport * as jStat from 'jstat';\n\nvar Probabilities = /*#__PURE__*/function (_Component) {\n  _inherits(Probabilities, _Component);\n\n  var _super = _createSuper(Probabilities);\n\n  function Probabilities(props) {\n    var _this;\n\n    _classCallCheck(this, Probabilities);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      probability: 0.1,\n      trials: 10.0,\n      amount: 1.0,\n      exact: 0.0,\n      atMost: 0.0,\n      atLeast: 0.0,\n      fifty: 0.0,\n      ninetyFive: 0.0\n    };\n    return _this;\n  }\n\n  _createClass(Probabilities, [{\n    key: \"runCalcs\",\n    value: function runCalcs() {\n      var amount = parseFloat(this.state.amount);\n      var trials = parseInt(this.state.trials);\n      var probability = parseFloat(this.state.probability);\n      this.setState({\n        exact: jStat.binomial.pdf(amount, trials, probability),\n        atMost: jStat.binomial.cdf(amount, trials, probability),\n        atLeast: 1 - jStat.binomial.cdf(amount - 1, trials, probability),\n        fifty: Math.ceil(Math.log(.5) / Math.log(1 - probability)),\n        ninetyFive: Math.ceil(Math.log(.05) / Math.log(1 - probability))\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Head, {\n          children: /*#__PURE__*/_jsxDEV(\"title\", {\n            children: \"Drop Probability Calculator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl text-center dark:text-gray-300\",\n          children: \"Drop Probability Calculator\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.probability,\n            onChange: function onChange(e) {\n              _this2.setState({\n                probability: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.trials,\n            onChange: function onChange(e) {\n              _this2.setState({\n                trials: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.amount,\n            onChange: function onChange(e) {\n              _this2.setState({\n                amount: e.target.value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: function onClick() {\n              return _this2.runCalcs();\n            },\n            children: \"Calculate Probabilities\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [this.state.exact.toLocaleString('en', {\n              style: 'percent',\n              minimumFractionDigits: 2\n            }), \" chance of getting exacltly \", this.state.amount, \" drops.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [this.state.atLeast.toLocaleString('en', {\n              style: 'percent',\n              minimumFractionDigits: 2\n            }), \" chance of getting at least \", this.state.amount, \" drops.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [this.state.atMost.toLocaleString('en', {\n              style: 'percent',\n              minimumFractionDigits: 2\n            }), \" chance of getting at most \", this.state.amount, \" drops.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [this.state.fifty.toLocaleString('en'), \" trials required to have 50% chance of 1 drop\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [this.state.ninetyFive.toLocaleString('en'), \" trials required to have 95% chance of 1 drop\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return Probabilities;\n}(Component);\n\nexport { Probabilities as default };","map":{"version":3,"sources":["/Users/ras/Documents/git/mastery-calculator/pages/probabilites.js"],"names":["Component","Head","jStat","Probabilities","props","state","probability","trials","amount","exact","atMost","atLeast","fifty","ninetyFive","parseFloat","parseInt","setState","binomial","pdf","cdf","Math","ceil","log","e","target","value","runCalcs","toLocaleString","style","minimumFractionDigits"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport Head from 'next/head';\n\nimport * as jStat from 'jstat';\n\n\nexport default class Probabilities extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            probability: 0.1,\n            trials: 10.0,\n            amount: 1.0,\n            exact: 0.0,\n            atMost: 0.0,\n            atLeast: 0.0,\n            fifty: 0.0,\n            ninetyFive: 0.0\n        }\n    }\n\n    runCalcs() {\n        let amount = parseFloat(this.state.amount);\n        let trials = parseInt(this.state.trials);\n        let probability = parseFloat(this.state.probability);\n        this.setState({\n            exact: jStat.binomial.pdf(amount, trials, probability),\n            atMost: jStat.binomial.cdf(amount, trials, probability),\n            atLeast: 1 - jStat.binomial.cdf(amount - 1, trials, probability),\n            fifty: Math.ceil(Math.log(.5) / Math.log(1 - probability)),\n            ninetyFive: Math.ceil(Math.log(.05) / Math.log(1 - probability))\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Head>\n                    <title>Drop Probability Calculator</title>\n                </Head>\n                <h1 className=\"text-4xl text-center dark:text-gray-300\">Drop Probability Calculator</h1>\n                <div>\n                    <input value={this.state.probability} onChange={(e) => { this.setState({ probability: e.target.value }) }} />\n                    <input value={this.state.trials} onChange={(e) => { this.setState({ trials: e.target.value }) }} />\n                    <input value={this.state.amount} onChange={(e) => { this.setState({ amount: e.target.value }) }} />\n                    <button type='button' onClick={() => this.runCalcs()}>Calculate Probabilities</button>\n                </div>\n                <div>\n                    <p>{this.state.exact.toLocaleString('en', { style: 'percent', minimumFractionDigits: 2 })} chance of getting exacltly {this.state.amount} drops.</p>\n                    <p>{this.state.atLeast.toLocaleString('en', { style: 'percent', minimumFractionDigits: 2 })} chance of getting at least {this.state.amount} drops.</p>\n                    <p>{this.state.atMost.toLocaleString('en', { style: 'percent', minimumFractionDigits: 2 })} chance of getting at most {this.state.amount} drops.</p>\n                    <p>{this.state.fifty.toLocaleString('en')} trials required to have 50% chance of 1 drop</p>\n                    <p>{this.state.ninetyFive.toLocaleString('en')} trials required to have 95% chance of 1 drop</p>\n                </div>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}