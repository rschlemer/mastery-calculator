{"ast":null,"code":"let DATA = require('data/melvorData.json');\n\nlet MASTERIES = DATA['masteries'];\nlet EXPERIENCE = DATA['experience'];\nlet ITEMS = DATA['items'];\nlet SKILLS = DATA['skills'];\nlet SKILLS_TO_MASTER = ['3', '5', '13', '14', '15', '19'];\nlet INTERVALS = {\n  '3': 2.4,\n  '5': 1.6,\n  '13': 1.2,\n  '14': 1.5,\n  '15': 1.6,\n  '19': 1.6\n};\nlet PRESERVATION = {\n  '3': 0.2,\n  '5': 0.3,\n  '13': 0.1,\n  '14': 0.15,\n  '15': 0.65,\n  '19': 0.15\n};\n\nclass Player {\n  constructor() {\n    this.skills = {};\n  }\n\n  loadPlayer() {\n    for (var skillId in MASTERIES) {\n      // initialize skill and load attributes\n      let skillData = SKILLS[skillId];\n      var skill = new Skill();\n      skill.skillId = skillId;\n      skill.name = skillData['name'].toLowerCase();\n      skill.pool = MASTERIES[skillId]['pool'];\n\n      if (SKILLS_TO_MASTER.includes(skillId)) {\n        skill.preservation = PRESERVATION[skillId];\n        skill.interval = INTERVALS[skillId];\n        skill.master = true;\n      } //loop through skill abilities and load ability attributes\n\n\n      for (const [i, xp] of MASTERIES[skillId]['xp'].entries()) {\n        let ability = new Ability();\n        ability.name = skillData['names'][i];\n        ability.xp = xp;\n        ability.parentSkill = skill;\n\n        if (SKILLS_TO_MASTER.includes(skillId)) {\n          let ingredients = skillData['ingredients'][i]; // loop through ability ingredients required and load data\n\n          for (var j = 0; j < ingredients.length; j++) {\n            let ingredientId = ingredients[j][0];\n            ability.ingredients.push({\n              'id': ingredientId,\n              'name': ITEMS[ingredientId]['name'],\n              'image': ITEMS[ingredientId]['media'],\n              'owned': 0,\n              'required': ingredients[j][1]\n            });\n          }\n        }\n\n        ability.getLevel();\n        skill.abilities[ability.name] = ability;\n      }\n\n      skill.getMastery();\n      this.skills[skill.name] = skill;\n    }\n\n    for (var itemId in ITEMS) {\n      for (const [skillName, skill] of Object.entries(this.skills)) {\n        var current = skill.abilities[ITEMS[itemId].name.toLowerCase().replace(' iv', '')];\n\n        if (current != undefined) {\n          current.image = ITEMS[itemId].media;\n        }\n      }\n    }\n  }\n\n  loadData(masteries, bank) {\n    for (const [skillName, skill] of Object.entries(this.skills)) {\n      //update skill pool\n      skill.pool = masteries[skill.skillId]['pool']; //loop through all abilities\n\n      const i = 0;\n\n      for (const [abilityName, ability] of Object.entries(skill.abilities)) {\n        //let ability = skill.abilities[abilityName];\n        //update ability xp, level, xpToLevel\n        ability.xp = masteries[skill.skillId]['xp'][i];\n        ability.getLevel();\n        i++; //update amount of ingredients in bank\n\n        let ingredients = ability.ingredients;\n\n        for (var j = 0; j < ingredients.length; j++) {\n          let ingredient = ingredients[j];\n\n          for (var bankPos in bank) {\n            let bankItem = bank[bankPos];\n\n            if (bankItem['id'] === ingredient['id']) {\n              ingredient['owned'] = bankItem['qty'];\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n}\n\nclass Skill {\n  constructor() {\n    this.skillId = '';\n    this.name = '';\n    this.pool = 0.0;\n    this.abilities = {};\n    this.preservation = 0.0;\n    this.interval = 0.0;\n    this.master = false;\n  }\n\n  getMastery() {\n    this.totalMastery = Object.keys(this.abilities).length * 99;\n    this.currentMastery = 0;\n\n    for (const [abilityName, ability] of Object.entries(this.abilities)) {\n      this.currentMastery += ability.level;\n    }\n  }\n\n  xpCalc(ability) {\n    let totalAbilities = Object.keys(this.abilities).length; //console.log(totalAbilities)\n    // .07 for ring, .03 for pet, .05 for 10% pool, .05 for firemaking pool, .0225 for firemaking logs\n\n    return (1 + totalAbilities) * this.currentMastery / this.totalMastery + ability.level * totalAbilities / 10 * this.interval * .5 * 1.2225;\n  }\n\n}\n\nclass Ability {\n  constructor() {\n    this.name = '';\n    this.xp = 0;\n    this.parentSkill = '';\n    this.xpToLevel = 0;\n    this.ingredients = [];\n    this.image = '';\n    this.xpEarned = 0;\n    this.timeToLevel = 0;\n    this.ingredientsUsed = [];\n    this.poolXpEarned = 0;\n  }\n\n  getLevel() {\n    for (var level in EXPERIENCE) {\n      if (this.xp >= 13034431) {\n        this.level = 99;\n        break;\n      } else if (this.xp >= EXPERIENCE[level]) {\n        ;\n      } else {\n        this.level = parseInt(level) - 1;\n        this.xpToLevel = EXPERIENCE[level] - this.xp;\n        break;\n      }\n    }\n  }\n\n  simulate(goal) {\n    console.log(this.parentSkill);\n    let timeList = [];\n    let itemUsedList = [];\n    let xpList = [];\n    let i = 0;\n\n    for (let i = 0; i < 100; i++) {\n      //clone ability\n      let simAbilityCopy = new Ability();\n      simAbilityCopy.name = this.name;\n      simAbilityCopy.xp = this.xp;\n      simAbilityCopy.getLevel();\n      simAbilityCopy.parentSkill = this.parentSkill;\n      let time = 0;\n      let itemsUsed = 0;\n      let simLevel = this.level;\n      let simXpRequired = this.xpToLevel;\n      let simXpEarned = this.parentSkill.xpCalc(simAbilityCopy);\n      let basePreserve = this.parentSkill.preservation;\n      let preserve = basePreserve;\n\n      if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n        preserve = basePreserve + simAbilityCopy.level * .002;\n      } else if (this.parentSkill.name == 'smithing') {\n        preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05;\n      }\n\n      while (simLevel < goal) {\n        if (simXpRequired <= 0) {\n          simXpEarned = simAbilityCopy.parentSkill.xpCalc(simAbilityCopy);\n          simAbilityCopy.getLevel();\n\n          if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n            preserve = basePreserve + simAbilityCopy.level * .002;\n          } else if (this.parentSkill.name == 'smithing') {\n            preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05;\n          } //console.log(preserve)\n\n\n          simLevel = simAbilityCopy.level;\n          simAbilityCopy.parentSkill.getMastery();\n          simXpRequired = simAbilityCopy.xpToLevel;\n        }\n\n        simXpRequired -= simXpEarned;\n        simAbilityCopy.xp += simXpEarned;\n\n        if (Math.random() > preserve) {\n          itemsUsed += 1;\n        }\n\n        time += simAbilityCopy.parentSkill.interval;\n      }\n\n      timeList.push(time);\n      itemUsedList.push(itemsUsed);\n      xpList.push(simAbilityCopy.xp - this.xp);\n      console.log(preserve);\n    }\n\n    var average = arr => arr.reduce((a, b) => a + b) / arr.length;\n\n    this.xpEarned = average(xpList);\n    this.ingredientsUsed = Math.ceil(average(itemUsedList));\n    let timeAverage = average(timeList);\n    let days = Math.floor(timeAverage / 86400) > 0 ? Math.floor(timeAverage / 86400).toString() + \" day \" : \"\";\n    this.timeToLevel = days + new Date(timeAverage * 1000).toISOString().substr(11, 8);\n    this.poolXpEarned = Math.floor(this.xpEarned * .5);\n    this.xp += this.xpEarned;\n    this.getLevel();\n    console.log(this);\n  }\n\n}\n\nexport { Player, Skill, Ability };","map":{"version":3,"sources":["/Users/ras/Documents/git/mastery-calculator/data/masteryCalc.js"],"names":["DATA","require","MASTERIES","EXPERIENCE","ITEMS","SKILLS","SKILLS_TO_MASTER","INTERVALS","PRESERVATION","Player","constructor","skills","loadPlayer","skillId","skillData","skill","Skill","name","toLowerCase","pool","includes","preservation","interval","master","i","xp","entries","ability","Ability","parentSkill","ingredients","j","length","ingredientId","push","getLevel","abilities","getMastery","itemId","skillName","Object","current","replace","undefined","image","media","loadData","masteries","bank","abilityName","ingredient","bankPos","bankItem","totalMastery","keys","currentMastery","level","xpCalc","totalAbilities","xpToLevel","xpEarned","timeToLevel","ingredientsUsed","poolXpEarned","parseInt","simulate","goal","console","log","timeList","itemUsedList","xpList","simAbilityCopy","time","itemsUsed","simLevel","simXpRequired","simXpEarned","basePreserve","preserve","Math","floor","random","average","arr","reduce","a","b","ceil","timeAverage","days","toString","Date","toISOString","substr"],"mappings":"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","sourcesContent":["let DATA = require('data/melvorData.json');\nlet MASTERIES = DATA['masteries'];\nlet EXPERIENCE = DATA['experience'];\nlet ITEMS = DATA['items'];\nlet SKILLS = DATA['skills'];\nlet SKILLS_TO_MASTER = ['3', '5', '13', '14', '15', '19'];\nlet INTERVALS = { '3': 2.4, '5': 1.6, '13': 1.2, '14': 1.5, '15': 1.6, '19': 1.6 };\nlet PRESERVATION = { '3': 0.2, '5': 0.3, '13': 0.1, '14': 0.15, '15': 0.65, '19': 0.15 };\n\nclass Player {\n    constructor() {\n        this.skills = {};\n    }\n    loadPlayer() {\n        for (var skillId in MASTERIES) {\n            // initialize skill and load attributes\n            let skillData = SKILLS[skillId];\n            var skill = new Skill();\n            skill.skillId = skillId;\n            skill.name = skillData['name'].toLowerCase();\n            skill.pool = MASTERIES[skillId]['pool'];\n            if (SKILLS_TO_MASTER.includes(skillId)) {\n                skill.preservation = PRESERVATION[skillId];\n                skill.interval = INTERVALS[skillId];\n                skill.master = true;\n            }\n\n            //loop through skill abilities and load ability attributes\n            for (const [i, xp] of MASTERIES[skillId]['xp'].entries()) {\n                let ability = new Ability()\n                ability.name = skillData['names'][i]\n                ability.xp = xp\n                ability.parentSkill = skill\n                if (SKILLS_TO_MASTER.includes(skillId)) {\n                    let ingredients = skillData['ingredients'][i];\n                    // loop through ability ingredients required and load data\n                    for (var j = 0; j < ingredients.length; j++) {\n                        let ingredientId = ingredients[j][0];\n                        ability.ingredients.push({\n                            'id': ingredientId,\n                            'name': ITEMS[ingredientId]['name'],\n                            'image': ITEMS[ingredientId]['media'],\n                            'owned': 0,\n                            'required': ingredients[j][1]\n                        });\n                    }\n                }\n                ability.getLevel();\n                skill.abilities[ability.name] = ability;\n            }\n            skill.getMastery();\n            this.skills[skill.name] = skill;\n        }\n\n        for (var itemId in ITEMS) {\n            for (const [skillName, skill] of Object.entries(this.skills)) {\n                var current = skill.abilities[ITEMS[itemId].name.toLowerCase().replace(' iv', '')]\n                if (current != undefined) {\n                    current.image = ITEMS[itemId].media;\n                }\n            }\n        }\n    }\n    loadData(masteries, bank) {\n        for (const [skillName, skill] of Object.entries(this.skills)) {\n            //update skill pool\n            skill.pool = masteries[skill.skillId]['pool'];\n\n            //loop through all abilities\n            const i = 0\n            for (const [abilityName, ability] of Object.entries(skill.abilities)) {\n                //let ability = skill.abilities[abilityName];\n\n                //update ability xp, level, xpToLevel\n                ability.xp = masteries[skill.skillId]['xp'][i]\n                ability.getLevel()\n                i++\n\n                //update amount of ingredients in bank\n                let ingredients = ability.ingredients\n                for (var j = 0; j < ingredients.length; j++) {\n                    let ingredient = ingredients[j];\n                    for (var bankPos in bank) {\n                        let bankItem = bank[bankPos]\n                        if (bankItem['id'] === ingredient['id']) {\n                            ingredient['owned'] = bankItem['qty'];\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nclass Skill {\n    constructor() {\n        this.skillId = '';\n        this.name = '';\n        this.pool = 0.0;\n        this.abilities = {};\n        this.preservation = 0.0;\n        this.interval = 0.0;\n        this.master = false;\n    }\n    getMastery() {\n        this.totalMastery = Object.keys(this.abilities).length * 99;\n        this.currentMastery = 0;\n        for (const [abilityName, ability] of Object.entries(this.abilities)) {\n            this.currentMastery += ability.level\n        }\n    }\n    xpCalc(ability) {\n        let totalAbilities = Object.keys(this.abilities).length;\n        //console.log(totalAbilities)\n\n        // .07 for ring, .03 for pet, .05 for 10% pool, .05 for firemaking pool, .0225 for firemaking logs\n\n        return (\n            (1 + totalAbilities) * this.currentMastery / this.totalMastery + ability.level * totalAbilities / 10 * this.interval * .5 * 1.2225\n        )\n    }\n}\n\nclass Ability {\n    constructor() {\n        this.name = '';\n        this.xp = 0;\n        this.parentSkill = '';\n        this.xpToLevel = 0;\n        this.ingredients = [];\n        this.image = '';\n        this.xpEarned = 0;\n        this.timeToLevel = 0;\n        this.ingredientsUsed = [];\n        this.poolXpEarned = 0;\n    }\n    getLevel() {\n        for (var level in EXPERIENCE) {\n            if (this.xp >= 13034431) {\n                this.level = 99;\n                break;\n            } else if (this.xp >= EXPERIENCE[level]) {\n                ;\n            } else {\n                this.level = parseInt(level) - 1;\n                this.xpToLevel = EXPERIENCE[level] - this.xp;\n                break;\n            }\n        }\n    }\n    simulate(goal) {\n        console.log(this.parentSkill);\n        let timeList = [];\n        let itemUsedList = [];\n        let xpList = [];\n        let i = 0;\n        for (let i = 0; i < 100; i++) {\n            //clone ability\n            let simAbilityCopy = new Ability();\n            simAbilityCopy.name = this.name;\n            simAbilityCopy.xp = this.xp;\n            simAbilityCopy.getLevel();\n            simAbilityCopy.parentSkill = this.parentSkill;\n\n            let time = 0;\n            let itemsUsed = 0;\n            let simLevel = this.level;\n            let simXpRequired = this.xpToLevel;\n            let simXpEarned = this.parentSkill.xpCalc(simAbilityCopy);\n            let basePreserve = this.parentSkill.preservation;\n            let preserve = basePreserve;\n            if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n                preserve = basePreserve + simAbilityCopy.level * .002\n            } else if (this.parentSkill.name == 'smithing') {\n                preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05\n            }\n\n            while (simLevel < goal) {\n                if (simXpRequired <= 0) {\n                    simXpEarned = simAbilityCopy.parentSkill.xpCalc(simAbilityCopy);\n                    simAbilityCopy.getLevel();\n                    if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n                        preserve = basePreserve + simAbilityCopy.level * .002\n                    } else if (this.parentSkill.name == 'smithing') {\n                        preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05\n                    }\n                    //console.log(preserve)\n                    simLevel = simAbilityCopy.level\n                    simAbilityCopy.parentSkill.getMastery()\n                    simXpRequired = simAbilityCopy.xpToLevel;\n                }\n                simXpRequired -= simXpEarned\n                simAbilityCopy.xp += simXpEarned\n                if (Math.random() > preserve) {\n                    itemsUsed += 1\n                }\n                time += simAbilityCopy.parentSkill.interval\n            }\n            timeList.push(time)\n            itemUsedList.push(itemsUsed)\n            xpList.push(simAbilityCopy.xp - this.xp)\n            console.log(preserve)\n        }\n        var average = arr => arr.reduce((a, b) => a + b) / arr.length;\n\n        this.xpEarned = average(xpList);\n        this.ingredientsUsed = Math.ceil(average(itemUsedList));\n        let timeAverage = average(timeList);\n        let days = Math.floor(timeAverage / 86400) > 0 ? Math.floor(timeAverage / 86400).toString() + \" day \" : \"\";\n        this.timeToLevel = days + new Date(timeAverage * 1000).toISOString().substr(11, 8);\n        this.poolXpEarned = Math.floor(this.xpEarned * .5);\n        this.xp += this.xpEarned\n        this.getLevel()\n        console.log(this)\n    }\n}\n\nexport { Player, Skill, Ability };"]},"metadata":{},"sourceType":"module"}