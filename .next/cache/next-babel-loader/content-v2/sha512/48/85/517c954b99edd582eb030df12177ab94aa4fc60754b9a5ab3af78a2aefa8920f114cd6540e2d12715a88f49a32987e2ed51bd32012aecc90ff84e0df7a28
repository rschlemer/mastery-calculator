{"ast":null,"code":"import { useEffect } from 'react';\nexport default function useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, // Add ref and handler to effect dependencies\n  // It's worth noting that because passed in handler is a new ...\n  // ... function on every render that will cause this effect ...\n  // ... callback/cleanup to run every render. It's not a big deal ...\n  // ... but to optimize you can wrap handler in useCallback before ...\n  // ... passing it into this hook.\n  [ref, handler]);\n}","map":{"version":3,"sources":["/Users/ras/Documents/git/mastery-calculator/components/outsideclick.js"],"names":["useEffect","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,eAAe,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,OAAhC,EAAyC;AACpDH,EAAAA,SAAS,CACL,MAAM;AACF,UAAMI,QAAQ,GAAGC,KAAK,IAAI;AACtB;AACA,UAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACpD;AACH;;AAEDL,MAAAA,OAAO,CAACE,KAAD,CAAP;AACH,KAPD;;AASAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AACAK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCN,QAAxC;AAEA,WAAO,MAAM;AACTK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACAK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CP,QAA3C;AACH,KAHD;AAIH,GAlBI,EAmBL;AACA;AACA;AACA;AACA;AACA;AACA,GAACF,GAAD,EAAMC,OAAN,CAzBK,CAAT;AA2BH","sourcesContent":["import { useEffect } from 'react';\n\nexport default function useOnClickOutside(ref, handler) {\n    useEffect(\n        () => {\n            const listener = event => {\n                // Do nothing if clicking ref's element or descendent elements\n                if (!ref.current || ref.current.contains(event.target)) {\n                    return;\n                }\n\n                handler(event);\n            };\n\n            document.addEventListener('mousedown', listener);\n            document.addEventListener('touchstart', listener);\n\n            return () => {\n                document.removeEventListener('mousedown', listener);\n                document.removeEventListener('touchstart', listener);\n            };\n        },\n        // Add ref and handler to effect dependencies\n        // It's worth noting that because passed in handler is a new ...\n        // ... function on every render that will cause this effect ...\n        // ... callback/cleanup to run every render. It's not a big deal ...\n        // ... but to optimize you can wrap handler in useCallback before ...\n        // ... passing it into this hook.\n        [ref, handler]\n    );\n}\n"]},"metadata":{},"sourceType":"module"}