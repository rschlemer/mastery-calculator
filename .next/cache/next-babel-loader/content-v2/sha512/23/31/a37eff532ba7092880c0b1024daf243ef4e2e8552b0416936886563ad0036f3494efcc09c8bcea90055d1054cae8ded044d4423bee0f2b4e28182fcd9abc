{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar DATA = require('data/melvorData.json');\n\nvar MASTERIES = DATA['masteries'];\nvar EXPERIENCE = DATA['experience'];\nvar ITEMS = DATA['items'];\nvar SKILLS = DATA['skills'];\nvar SKILLS_TO_MASTER = ['3', '5', '13', '14', '15', '19'];\nvar INTERVALS = {\n  '3': 2.4,\n  '5': 1.6,\n  '13': 1.2,\n  '14': 1.5,\n  '15': 1.6,\n  '19': 1.6\n};\nvar PRESERVATION = {\n  '3': 0.2,\n  '5': 0.3,\n  '13': 0.1,\n  '14': 0.15,\n  '15': 0.65,\n  '19': 0.15\n};\n\nvar Player = /*#__PURE__*/function () {\n  function Player() {\n    _classCallCheck(this, Player);\n\n    this.skills = {};\n  }\n\n  _createClass(Player, [{\n    key: \"loadPlayer\",\n    value: function loadPlayer() {\n      for (var skillId in MASTERIES) {\n        // initialize skill and load attributes\n        var skillData = SKILLS[skillId];\n        var skill = new Skill();\n        skill.skillId = skillId;\n        skill.name = skillData['name'].toLowerCase();\n        skill.pool = MASTERIES[skillId]['pool'];\n\n        if (SKILLS_TO_MASTER.includes(skillId)) {\n          skill.preservation = PRESERVATION[skillId];\n          skill.interval = INTERVALS[skillId];\n          skill.master = true;\n        } //loop through skill abilities and load ability attributes\n\n\n        var _iterator = _createForOfIteratorHelper(MASTERIES[skillId]['xp'].entries()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                i = _step$value[0],\n                xp = _step$value[1];\n\n            var ability = new Ability();\n            ability.name = skillData['names'][i];\n            ability.xp = xp;\n            ability.parentSkill = skill;\n\n            if (SKILLS_TO_MASTER.includes(skillId)) {\n              var ingredients = skillData['ingredients'][i]; // loop through ability ingredients required and load data\n\n              for (var j = 0; j < ingredients.length; j++) {\n                var ingredientId = ingredients[j][0];\n                ability.ingredients.push({\n                  'id': ingredientId,\n                  'name': ITEMS[ingredientId]['name'],\n                  'image': ITEMS[ingredientId]['media'],\n                  'owned': 0,\n                  'required': ingredients[j][1]\n                });\n              }\n            }\n\n            ability.getLevel();\n            skill.abilities[ability.name] = ability;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        skill.getMastery();\n        this.skills[skill.name] = skill;\n      }\n\n      for (var itemId in ITEMS) {\n        for (var _i = 0, _Object$entries = Object.entries(this.skills); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              skillName = _Object$entries$_i[0],\n              _skill = _Object$entries$_i[1];\n\n          var current = _skill.abilities[ITEMS[itemId].name.toLowerCase().replace(' iv', '')];\n\n          if (current != undefined) {\n            current.image = ITEMS[itemId].media;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData(masteries, bank) {\n      for (var _i2 = 0, _Object$entries2 = Object.entries(this.skills); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            skillName = _Object$entries2$_i[0],\n            skill = _Object$entries2$_i[1];\n\n        //update skill pool\n        skill.pool = masteries[skill.skillId]['pool']; //loop through all abilities\n\n        var i = 0;\n\n        for (var _i3 = 0, _Object$entries3 = Object.entries(skill.abilities); _i3 < _Object$entries3.length; _i3++) {\n          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n              abilityName = _Object$entries3$_i[0],\n              ability = _Object$entries3$_i[1];\n\n          //let ability = skill.abilities[abilityName];\n          //update ability xp, level, xpToLevel\n          ability.xp = masteries[skill.skillId]['xp'][i];\n          ability.getLevel();\n          i++; //update amount of ingredients in bank\n\n          var ingredients = ability.ingredients;\n\n          for (var j = 0; j < ingredients.length; j++) {\n            var ingredient = ingredients[j];\n\n            for (var bankPos in bank) {\n              var bankItem = bank[bankPos];\n\n              if (bankItem['id'] === ingredient['id']) {\n                ingredient['owned'] = bankItem['qty'];\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return Player;\n}();\n\nvar Skill = /*#__PURE__*/function () {\n  function Skill() {\n    _classCallCheck(this, Skill);\n\n    this.skillId = '';\n    this.name = '';\n    this.pool = 0.0;\n    this.abilities = {};\n    this.preservation = 0.0;\n    this.interval = 0.0;\n    this.master = false;\n  }\n\n  _createClass(Skill, [{\n    key: \"getMastery\",\n    value: function getMastery() {\n      this.totalMastery = Object.keys(this.abilities).length * 99;\n      this.currentMastery = 0;\n\n      for (var _i4 = 0, _Object$entries4 = Object.entries(this.abilities); _i4 < _Object$entries4.length; _i4++) {\n        var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i4], 2),\n            abilityName = _Object$entries4$_i[0],\n            ability = _Object$entries4$_i[1];\n\n        this.currentMastery += ability.level;\n      }\n    }\n  }, {\n    key: \"xpCalc\",\n    value: function xpCalc(ability) {\n      var totalAbilities = Object.keys(this.abilities).length; //console.log(totalAbilities)\n      // .07 for ring, .03 for pet, .05 for 10% pool, .05 for firemaking pool, .0225 for firemaking logs\n\n      return (1 + totalAbilities) * this.currentMastery / this.totalMastery + ability.level * totalAbilities / 10 * this.interval * .5 * 1.2225;\n    }\n  }]);\n\n  return Skill;\n}();\n\nvar Ability = /*#__PURE__*/function () {\n  function Ability() {\n    _classCallCheck(this, Ability);\n\n    this.name = '';\n    this.xp = 0;\n    this.parentSkill = '';\n    this.xpToLevel = 0;\n    this.ingredients = [];\n    this.image = '';\n    this.xpEarned = 0;\n    this.timeToLevel = 0;\n    this.ingredientsUsed = [];\n    this.poolXpEarned = 0;\n  }\n\n  _createClass(Ability, [{\n    key: \"getLevel\",\n    value: function getLevel() {\n      for (var level in EXPERIENCE) {\n        if (this.xp >= 13034431) {\n          this.level = 99;\n          break;\n        } else if (this.xp >= EXPERIENCE[level]) {\n          ;\n        } else {\n          this.level = parseInt(level) - 1;\n          this.xpToLevel = EXPERIENCE[level] - this.xp;\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"simulate\",\n    value: function simulate(goal) {\n      console.log(this.parentSkill);\n      var timeList = [];\n      var itemUsedList = [];\n      var xpList = [];\n      var i = 0;\n\n      for (var _i5 = 0; _i5 < 100; _i5++) {\n        //clone ability\n        var simAbilityCopy = new Ability();\n        simAbilityCopy.name = this.name;\n        simAbilityCopy.xp = this.xp;\n        simAbilityCopy.getLevel();\n        simAbilityCopy.parentSkill = this.parentSkill;\n        var time = 0;\n        var itemsUsed = 0;\n        var simLevel = this.level;\n        var simXpRequired = this.xpToLevel;\n        var simXpEarned = this.parentSkill.xpCalc(simAbilityCopy);\n        var basePreserve = this.parentSkill.preservation;\n        var preserve = basePreserve;\n\n        if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n          preserve = basePreserve + simAbilityCopy.level * .002;\n        } else if (this.parentSkill.name == 'smithing') {\n          preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05;\n        }\n\n        while (simLevel < goal) {\n          if (simXpRequired <= 0) {\n            simXpEarned = simAbilityCopy.parentSkill.xpCalc(simAbilityCopy);\n            simAbilityCopy.getLevel();\n\n            if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n              preserve = basePreserve + simAbilityCopy.level * .002;\n            } else if (this.parentSkill.name == 'smithing') {\n              preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05;\n            } //console.log(preserve)\n\n\n            simLevel = simAbilityCopy.level;\n            simAbilityCopy.parentSkill.getMastery();\n            simXpRequired = simAbilityCopy.xpToLevel;\n          }\n\n          simXpRequired -= simXpEarned;\n          simAbilityCopy.xp += simXpEarned;\n\n          if (Math.random() > preserve) {\n            itemsUsed += 1;\n          }\n\n          time += simAbilityCopy.parentSkill.interval;\n        }\n\n        timeList.push(time);\n        itemUsedList.push(itemsUsed);\n        xpList.push(simAbilityCopy.xp - this.xp);\n        console.log(preserve);\n      }\n\n      var average = function average(arr) {\n        return arr.reduce(function (a, b) {\n          return a + b;\n        }) / arr.length;\n      };\n\n      this.xpEarned = average(xpList);\n      this.ingredientsUsed = Math.ceil(average(itemUsedList));\n      var timeAverage = average(timeList);\n      var days = Math.floor(timeAverage / 86400) > 0 ? Math.floor(timeAverage / 86400).toString() + \" day \" : \"\";\n      this.timeToLevel = days + new Date(timeAverage * 1000).toISOString().substr(11, 8);\n      this.poolXpEarned = Math.floor(this.xpEarned * .5);\n      this.xp += this.xpEarned;\n      this.getLevel();\n      console.log(this);\n    }\n  }]);\n\n  return Ability;\n}();\n\nexport { Player, Skill, Ability };","map":{"version":3,"sources":["/Users/ras/Documents/git/mastery-calculator/data/masteryCalc.js"],"names":["DATA","require","MASTERIES","EXPERIENCE","ITEMS","SKILLS","SKILLS_TO_MASTER","INTERVALS","PRESERVATION","Player","skills","skillId","skillData","skill","Skill","name","toLowerCase","pool","includes","preservation","interval","master","entries","i","xp","ability","Ability","parentSkill","ingredients","j","length","ingredientId","push","getLevel","abilities","getMastery","itemId","Object","skillName","current","replace","undefined","image","media","masteries","bank","abilityName","ingredient","bankPos","bankItem","totalMastery","keys","currentMastery","level","totalAbilities","xpToLevel","xpEarned","timeToLevel","ingredientsUsed","poolXpEarned","parseInt","goal","console","log","timeList","itemUsedList","xpList","simAbilityCopy","time","itemsUsed","simLevel","simXpRequired","simXpEarned","xpCalc","basePreserve","preserve","Math","floor","random","average","arr","reduce","a","b","ceil","timeAverage","days","toString","Date","toISOString","substr"],"mappings":"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","sourcesContent":["let DATA = require('data/melvorData.json');\nlet MASTERIES = DATA['masteries'];\nlet EXPERIENCE = DATA['experience'];\nlet ITEMS = DATA['items'];\nlet SKILLS = DATA['skills'];\nlet SKILLS_TO_MASTER = ['3', '5', '13', '14', '15', '19'];\nlet INTERVALS = { '3': 2.4, '5': 1.6, '13': 1.2, '14': 1.5, '15': 1.6, '19': 1.6 };\nlet PRESERVATION = { '3': 0.2, '5': 0.3, '13': 0.1, '14': 0.15, '15': 0.65, '19': 0.15 };\n\nclass Player {\n    constructor() {\n        this.skills = {};\n    }\n    loadPlayer() {\n        for (var skillId in MASTERIES) {\n            // initialize skill and load attributes\n            let skillData = SKILLS[skillId];\n            var skill = new Skill();\n            skill.skillId = skillId;\n            skill.name = skillData['name'].toLowerCase();\n            skill.pool = MASTERIES[skillId]['pool'];\n            if (SKILLS_TO_MASTER.includes(skillId)) {\n                skill.preservation = PRESERVATION[skillId];\n                skill.interval = INTERVALS[skillId];\n                skill.master = true;\n            }\n\n            //loop through skill abilities and load ability attributes\n            for (const [i, xp] of MASTERIES[skillId]['xp'].entries()) {\n                let ability = new Ability()\n                ability.name = skillData['names'][i]\n                ability.xp = xp\n                ability.parentSkill = skill\n                if (SKILLS_TO_MASTER.includes(skillId)) {\n                    let ingredients = skillData['ingredients'][i];\n                    // loop through ability ingredients required and load data\n                    for (var j = 0; j < ingredients.length; j++) {\n                        let ingredientId = ingredients[j][0];\n                        ability.ingredients.push({\n                            'id': ingredientId,\n                            'name': ITEMS[ingredientId]['name'],\n                            'image': ITEMS[ingredientId]['media'],\n                            'owned': 0,\n                            'required': ingredients[j][1]\n                        });\n                    }\n                }\n                ability.getLevel();\n                skill.abilities[ability.name] = ability;\n            }\n            skill.getMastery();\n            this.skills[skill.name] = skill;\n        }\n\n        for (var itemId in ITEMS) {\n            for (const [skillName, skill] of Object.entries(this.skills)) {\n                var current = skill.abilities[ITEMS[itemId].name.toLowerCase().replace(' iv', '')]\n                if (current != undefined) {\n                    current.image = ITEMS[itemId].media;\n                }\n            }\n        }\n    }\n    loadData(masteries, bank) {\n        for (const [skillName, skill] of Object.entries(this.skills)) {\n            //update skill pool\n            skill.pool = masteries[skill.skillId]['pool'];\n\n            //loop through all abilities\n            const i = 0\n            for (const [abilityName, ability] of Object.entries(skill.abilities)) {\n                //let ability = skill.abilities[abilityName];\n\n                //update ability xp, level, xpToLevel\n                ability.xp = masteries[skill.skillId]['xp'][i]\n                ability.getLevel()\n                i++\n\n                //update amount of ingredients in bank\n                let ingredients = ability.ingredients\n                for (var j = 0; j < ingredients.length; j++) {\n                    let ingredient = ingredients[j];\n                    for (var bankPos in bank) {\n                        let bankItem = bank[bankPos]\n                        if (bankItem['id'] === ingredient['id']) {\n                            ingredient['owned'] = bankItem['qty'];\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nclass Skill {\n    constructor() {\n        this.skillId = '';\n        this.name = '';\n        this.pool = 0.0;\n        this.abilities = {};\n        this.preservation = 0.0;\n        this.interval = 0.0;\n        this.master = false;\n    }\n    getMastery() {\n        this.totalMastery = Object.keys(this.abilities).length * 99;\n        this.currentMastery = 0;\n        for (const [abilityName, ability] of Object.entries(this.abilities)) {\n            this.currentMastery += ability.level\n        }\n    }\n    xpCalc(ability) {\n        let totalAbilities = Object.keys(this.abilities).length;\n        //console.log(totalAbilities)\n\n        // .07 for ring, .03 for pet, .05 for 10% pool, .05 for firemaking pool, .0225 for firemaking logs\n\n        return (\n            (1 + totalAbilities) * this.currentMastery / this.totalMastery + ability.level * totalAbilities / 10 * this.interval * .5 * 1.2225\n        )\n    }\n}\n\nclass Ability {\n    constructor() {\n        this.name = '';\n        this.xp = 0;\n        this.parentSkill = '';\n        this.xpToLevel = 0;\n        this.ingredients = [];\n        this.image = '';\n        this.xpEarned = 0;\n        this.timeToLevel = 0;\n        this.ingredientsUsed = [];\n        this.poolXpEarned = 0;\n    }\n    getLevel() {\n        for (var level in EXPERIENCE) {\n            if (this.xp >= 13034431) {\n                this.level = 99;\n                break;\n            } else if (this.xp >= EXPERIENCE[level]) {\n                ;\n            } else {\n                this.level = parseInt(level) - 1;\n                this.xpToLevel = EXPERIENCE[level] - this.xp;\n                break;\n            }\n        }\n    }\n    simulate(goal) {\n        console.log(this.parentSkill);\n        let timeList = [];\n        let itemUsedList = [];\n        let xpList = [];\n        let i = 0;\n        for (let i = 0; i < 100; i++) {\n            //clone ability\n            let simAbilityCopy = new Ability();\n            simAbilityCopy.name = this.name;\n            simAbilityCopy.xp = this.xp;\n            simAbilityCopy.getLevel();\n            simAbilityCopy.parentSkill = this.parentSkill;\n\n            let time = 0;\n            let itemsUsed = 0;\n            let simLevel = this.level;\n            let simXpRequired = this.xpToLevel;\n            let simXpEarned = this.parentSkill.xpCalc(simAbilityCopy);\n            let basePreserve = this.parentSkill.preservation;\n            let preserve = basePreserve;\n            if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n                preserve = basePreserve + simAbilityCopy.level * .002\n            } else if (this.parentSkill.name == 'smithing') {\n                preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05\n            }\n\n            while (simLevel < goal) {\n                if (simXpRequired <= 0) {\n                    simXpEarned = simAbilityCopy.parentSkill.xpCalc(simAbilityCopy);\n                    simAbilityCopy.getLevel();\n                    if (this.parentSkill.name == 'crafting' || this.parentSkill.name == 'fletching' || this.parentSkill.name == 'herblore') {\n                        preserve = basePreserve + simAbilityCopy.level * .002\n                    } else if (this.parentSkill.name == 'smithing') {\n                        preserve = basePreserve + Math.floor(simAbilityCopy.level / 20) * .05\n                    }\n                    //console.log(preserve)\n                    simLevel = simAbilityCopy.level\n                    simAbilityCopy.parentSkill.getMastery()\n                    simXpRequired = simAbilityCopy.xpToLevel;\n                }\n                simXpRequired -= simXpEarned\n                simAbilityCopy.xp += simXpEarned\n                if (Math.random() > preserve) {\n                    itemsUsed += 1\n                }\n                time += simAbilityCopy.parentSkill.interval\n            }\n            timeList.push(time)\n            itemUsedList.push(itemsUsed)\n            xpList.push(simAbilityCopy.xp - this.xp)\n            console.log(preserve)\n        }\n        var average = arr => arr.reduce((a, b) => a + b) / arr.length;\n\n        this.xpEarned = average(xpList);\n        this.ingredientsUsed = Math.ceil(average(itemUsedList));\n        let timeAverage = average(timeList);\n        let days = Math.floor(timeAverage / 86400) > 0 ? Math.floor(timeAverage / 86400).toString() + \" day \" : \"\";\n        this.timeToLevel = days + new Date(timeAverage * 1000).toISOString().substr(11, 8);\n        this.poolXpEarned = Math.floor(this.xpEarned * .5);\n        this.xp += this.xpEarned\n        this.getLevel()\n        console.log(this)\n    }\n}\n\nexport { Player, Skill, Ability };"]},"metadata":{},"sourceType":"module"}